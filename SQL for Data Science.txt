Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 	Code: SELECT COUNT (*) FROM Attribute;
				Result: 10000

ii. Business table = 	Code: SELECT COUNT (*) FROM Business;
			   	Result: 10000

iii. Category table = 	Code: SELECT COUNT (*) FROM Category;
			    	Result: 10000

iv. Checkin table = 	Code: SELECT COUNT (*) FROM Checkin;
			 	Result: 10000

v. elite_years table = 	Code:SELECT COUNT (*) FROM elite_years;
				Result:10000

vi. friend table = 	Code:SELECT COUNT (*) FROM friend;
				Result:10000

vii. hours table = 	Code:SELECT COUNT (*) FROM hours;
				Result:10000

viii. photo table = 	Code: SELECT COUNT (*) FROM photo;
			 	Result:10000

ix. review table = 	Code: SELECT COUNT (*) FROM review;
				Result:10000

x. tip table =  		Code: SELECT COUNT (*) FROM tip;
		    		Result:10000

xi. user table = 		Code: SELECT COUNT (*) FROM user;
		     		Result: 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. 
If two foreign keys are listed in the table, please specify which foreign key.

	Code: SELECT COUNT (DISTINCT(key)) FROM table;

i. Business = 	Code: SELECT COUNT(DISTINCT(id)) FROM Business;
			Result: 10000

ii. Hours = 	Code: SELECT COUNT(DISTINCT(business_id)) FROM Hours;
			Result: 1562

iii. Category = 	Code: SELECT COUNT(DISTINCT(business_id)) FROM Category;
			Result: 2643

iv. Attribute =	Code: SELECT COUNT(DISTINCT(business_id)) FROM Attribute;
			Result: 1115

v. Review =		Code: SELECT COUNT(DISTINCT(id)) FROM Review;
			Result: 10000

vi. Checkin = 	Code: SELECT COUNT(DISTINCT(business_id)) FROM Checkin;
			Result: 493

vii. Photo =	Code: SELECT COUNT(DISTINCT(id)) FROM Photo;
			Result: 10000

viii. Tip = 	Code: SELECT COUNT(DISTINCT(user_id)) FROM Tip;
			Result: 537

ix. User = 		Code: SELECT COUNT(DISTINCT(id)) FROM User;
			Result: 10000

x. Friend =		Code: SELECT COUNT(DISTINCT(user_id)) FROM Friend;
			Result: 11

xi. Elite_years =	Code: SELECT COUNT(DISTINCT(user_id)) FROM Elite_years;
			Result: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	SQL code used to arrive at answer:	SELECT * 
								FROM user 
								WHERE id IS NULL OR 
									name IS NULL OR 
									review_count IS NULL OR
									yelping_since IS NULL OR
									useful IS NULL OR
									funny IS NULL OR
									cool IS NULL OR
									fans IS NULL OR
									average_stars IS NULL OR 
		  							compliment_hot IS NULL OR 
		  							compliment_more IS NULL OR 
		 							compliment_profile IS NULL OR 
		  							compliment_cute IS NULL OR 
		  							compliment_list IS NULL OR 
		  							compliment_note IS NULL OR 
		  							compliment_plain IS NULL OR 
		  							compliment_cool IS NULL OR 
		  							compliment_funny IS NULL OR 
		  							compliment_writer IS NULL OR 
		  							compliment_photos IS NULL;

			SELECT * FROM MyTable WHERE COLLATE(Col1, Col2, Col3, Col4......) IS NULL;
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max: 2000	avg:  24.2995 
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: SELECT city, 
								SUM(review_count) AS Total_reviews
								FROM business
								GROUP BY city
								ORDER BY Total_reviews DESC;
	
	
	Copy and Paste the Result Below:  
+-----------------+---------------+
| city            | Total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer: 		SELECT stars, 
   						 	COUNT(review_count) AS count
							FROM business
							WHERE city = 'Avon'
							GROUP BY stars;		


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+


ii. Beachwood

SQL code used to arrive at answer: 	SELECT stars, 
    						COUNT(review_count) AS count
						FROM business
						WHERE city = 'Beachwood'
						GROUP BY stars;		


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer: 
							SELECT id, 
    							   name, 
    							   review_count
							FROM user
        						ORDER BY review_count DESC
        						LIMIT 3;				
		
	Copy and Paste the Result Below:
		
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	No, posing more reviews does not correlate with more fans. From my findings, users with 
	the highest number of reviews do not correspond with the highest number of fans. Thus, some users have a
	high review count but a low number of fans while some have a high number of fans but low review count.

Code: 	SELECT name, 
		review_count, 
		fans
		FROM user
		ORDER BY review_count DESC;

Result:
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word 'love' in them.
			reviews with love = 1780
		  	reviews with hate = 232

	
	SQL code used to arrive at answer:
							SELECT COUNT(text)
							FROM review	
							WHERE text LIKE "%love%"								

							SELECT COUNT(text)
							FROM review	
							WHERE text LIKE "%hate%"
							
				SELECT COUNT(text),
					CASE
    						WHEN LOWER(text) LIKE "%hate%" THEN 'hate'
   						WHEN LOWER(text) LIKE "%love%" THEN 'love'
					END AS feelings;
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:	SELECT name, fans
							FROM user
							ORDER BY fans DESC
							LIMIT 10;
	
	
	Copy and Paste the Result Below:	
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	Answer: No. Based on the groups selected, the result shows only one business in Charlotte 
	and thus it has the same distribution of hours.

ii. Do the two groups you chose to analyze have a different number of reviews?
      Answer: No. Based on the groups selected, the result shows only one business in Charlotte thus, the review count is the same.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	Answer: Yes, since the query result is only one business, the postal code is the same.
	

SQL code used for analysis: 	SELECT B.name,
			   		B.review_count,
			   		H.hours,
			  	 	postal_code,
			   			CASE
				 		 	WHEN hours LIKE "%monday%" THEN 'Day 1'
				 			WHEN hours LIKE "%tuesday%" THEN 'Day 2'
				  			WHEN hours LIKE "%wednesday%" THEN 'Day 3'
				  			WHEN hours LIKE "%thursday%" THEN 'Day 4'
				  			WHEN hours LIKE "%friday%" THEN 'Day 5'
				  			WHEN hours LIKE "%saturday%" THEN 'Day 6'
				  			WHEN hours LIKE "%sunday%" THEN 'Day 7'
			   			END AS day,
			   			CASE
				  			WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
				  			WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
			   			END AS star_rating
					FROM business B 
					INNER JOIN hours H
					ON B.id = H.business_id
					INNER JOIN category C
					ON C.business_id = B.id
						WHERE (B.city == 'Charlotte' AND C.category LIKE 'Restaurants')
						AND (B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
						GROUP BY stars, day
						ORDER BY day, star_rating ASC;


		
		
2. Group business based on the ones that are open and the ones that are closed. 
   What differences can you find between the ones that are still open and the ones that are closed? 
   List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: 
	
			The businesses that are open have a lot more reviews than the ones that are closed.
		
			Open:   Total review_count = 269300
			Closed: Total review_count = 35261
	
         
         
ii. Difference 2:

			The businesses that are open have a higher average star rating than the ones that are closed.
		
			Open:   Average star rating = 3.68
			Closed: Average star rating = 3.52
         
         
SQL code used for analysis:	         
					SELECT
					is_open, 
					COUNT(DISTINCT(id)),
					SUM(review_count),
					AVG(stars)
					FROM business
					GROUP BY is_open;

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to 
   prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, 
clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, 
predicting the number of fans a user will have, and so on. These are just a few examples to get you started, 
so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
	Predicting the overall star rating for a business category.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

- To be able to predict the overall star rating for a business, the main data that is needed for this analysis include:
	the category of business
	number of reviews, 
	star rating of the business, 
	is open or close, 
	and location (City)
   Also, the categories will be used to better distinguish between different types of businesses. `is_open` will 
   determine which business is open and which business has closed (not hours) but permanently.
                           
                  
iii. Output of your finished dataset:


         
iv. Provide the SQL code you used to create your final dataset:


	SELECT DISTINCT(C.category),
		B.city,
		SUM(B.review_count) AS Total_reviews,
		AVG(B.stars) AS Avg_rating,
		B.is_open	
	FROM business B
	INNER JOIN category C
	ON B.id = C.business_id
	GROUP BY B.city;

